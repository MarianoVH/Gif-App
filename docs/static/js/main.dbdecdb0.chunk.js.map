{"version":3,"sources":["components/AddCategory/AddCategory.jsx","utils/getGifs.js","hooks/useFetch.js","components/GifItem/GIfItem.jsx","components/Loading/Loading.jsx","components/GifGrid/GifGrid.jsx","components/GifExpertApp/GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","value","setValue","onSubmit","e","preventDefault","trim","length","categories","type","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","useFetch","loading","state","setState","useEffect","then","imgs","setTimeout","propType","PropType","string","isRequired","GifItem","className","alt","src","Loading","GifGrid","key","GifExperteApp","ReactDOM","render","document","getElementById"],"mappings":"yTAIaA,G,MAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACtBC,mBAAS,IADa,mBACzCC,EADyC,KAClCC,EADkC,KAahD,OACE,0BAAMC,SATS,SAACC,GAChBA,EAAEC,iBACEJ,EAAMK,OAAOC,OAAS,IACxBL,EAAS,IACTH,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAeO,UAMvC,2BAAOC,KAAK,OAAOR,MAAOA,EAAOS,SAZpB,SAACN,GAAD,OAAOF,EAASE,EAAEO,OAAOV,a,uCCP/BW,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UACpDH,GAFmB,+DAKFI,MAAMF,GALJ,cAKfG,EALe,gBAOEA,EAAKC,OAPP,uBAObC,EAPa,EAObA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAbjB,kBAiBdM,GAjBc,4CAAH,sDCIPO,EAAW,SAACf,GAAc,IAAD,EACVb,mBAAS,CAAEoB,KAAM,GAAIS,SAAS,IADpB,mBAC7BC,EAD6B,KACtBC,EADsB,KAQpC,OANAC,qBAAU,WACRpB,EAAQC,GAAUoB,MAAK,SAACC,GAAD,OACrBC,WAAWJ,EAAS,CAAEX,KAAMc,EAAML,SAAS,IAAU,UAEtD,CAAChB,IAEGiB,GAGTF,EAASQ,SAAW,CAClBvB,SAAUwB,IAASC,OAAOC,Y,UCZfC,EAAU,SAAC,GAAD,IAAGf,EAAH,EAAGA,MAAOV,EAAV,EAAUA,IAAV,OACrB,yBAAK0B,UAAU,QACb,0BAAMA,UAAU,cAAchB,GAC9B,yBAAKgB,UAAU,iBACb,yBAAKC,IAAKjB,EAAOkB,IAAK5B,OAK5ByB,EAAQJ,SAAW,CACjBX,MAAOY,IAASC,OAAOC,WACvBxB,IAAKsB,IAASC,OAAOC,Y,UCZVK,EAAU,kBACrB,yBAAKH,UAAU,aACb,yBAAKA,UAAU,yCACb,yBAAKA,UAAU,oBACb,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,kCCXKI,G,MAAU,SAAC,GAAkB,IAAhBhC,EAAe,EAAfA,SAAe,EACbe,EAASf,GAA3BO,EAD+B,EAC/BA,KAAMS,EADyB,EACzBA,QACd,OACE,oCACGA,EACC,kBAAC,EAAD,MAEA,oCACE,4BAAKhB,EAAL,KACA,yBAAK4B,UAAU,8CACZrB,EAAKE,KAAI,gBAAGE,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOV,EAAd,EAAcA,IAAd,OACR,kBAAC,EAAD,CAAS+B,IAAKtB,EAAIT,IAAKA,EAAKU,MAAOA,YASjDoB,EAAQT,SAAW,CACjBvB,SAAUwB,IAASC,OAAOC,YCxBrB,IAAMQ,EAAgB,WAAO,IAAD,EACG/C,mBAAS,CAAC,cADb,mBAC1BQ,EAD0B,KACdT,EADc,KAGjC,OACE,oCACE,kBAAC,EAAD,CAAaA,cAAeA,IAC3BS,EAAWc,KAAI,SAACT,GAAD,OACd,kBAAC,EAAD,CAASiC,IAAKjC,EAAUA,SAAUA,SCN1CmC,IAASC,OAAO,kBAAC,EAAD,MAAmBC,SAASC,eAAe,W","file":"static/js/main.dbdecdb0.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./styles.css\";\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [value, setValue] = useState(\"\");\r\n\r\n  const onChange = (e) => setValue(e.target.value);\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (value.trim().length > 2) {\r\n      setValue(\"\"); \r\n      setCategories(categories => [value, ...categories]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <input type=\"text\" value={value} onChange={onChange} />\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","export const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category\r\n  )}&limit=10&api_key=tOABssXIdHe3QlBdR0TSMB0aGdH8a6PW`;\r\n\r\n  const resp = await fetch(url);\r\n\r\n  const { data } = await resp.json();\r\n\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url,\r\n    };\r\n  });\r\n\r\n  return gifs;\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport PropType from \"prop-types\";\r\nimport { getGifs } from \"../utils\";\r\n\r\nexport const useFetch = (category) => {\r\n  const [state, setState] = useState({ data: [], loading: true });\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) =>\r\n      setTimeout(setState({ data: imgs, loading: false }), 500)\r\n    );\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n\r\nuseFetch.propType = {\r\n  category: PropType.string.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport PropType from \"prop-types\";\r\nimport \"./styles.css\";\r\n\r\nexport const GifItem = ({ title, url }) => (\r\n  <div className=\"card\">\r\n    <span className=\"card-title\">{title}</span>\r\n    <div className=\"img-container\">\r\n      <img alt={title} src={url} />\r\n    </div>\r\n  </div>\r\n);\r\n\r\nGifItem.propType = {\r\n  title: PropType.string.isRequired,\r\n  url: PropType.string.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport \"./styles.css\";\r\n\r\nexport const Loading = () => (\r\n  <div className=\"container\">\r\n    <div className=\"loadingio-spinner-spinner-wzg1fxekwgs\">\r\n      <div className=\"ldio-hryitr9s32w\">\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport PropType from \"prop-types\";\r\nimport { useFetch } from \"../../hooks\";\r\nimport { GifItem } from \"../GifItem\";\r\nimport { Loading } from \"../Loading\";\r\nimport \"./styles.css\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  const { data, loading } = useFetch(category);\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <Loading />\r\n      ) : (\r\n        <>\r\n          <h3>{category} </h3>\r\n          <div className=\"gif-grid animate__animated animate__fadeIn\">\r\n            {data.map(({ id, title, url }) => (\r\n              <GifItem key={id} url={url} title={title} />\r\n            ))}\r\n          </div>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nGifGrid.propType = {\r\n  category: PropType.string.isRequired,\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"../AddCategory\";\r\nimport { GifGrid } from \"../GifGrid\";\r\n\r\nexport const GifExperteApp = () => {\r\n  const [categories, setCategories] = useState([\"One Punch\"]);\r\n\r\n  return (\r\n    <>\r\n      <AddCategory setCategories={setCategories} />\r\n      {categories.map((category) => (\r\n        <GifGrid key={category} category={category} />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { GifExperteApp } from \"./components\";\n\nReactDOM.render(<GifExperteApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}